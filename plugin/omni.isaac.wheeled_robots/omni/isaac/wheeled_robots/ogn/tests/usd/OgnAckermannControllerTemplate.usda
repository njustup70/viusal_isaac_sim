#usda 1.0
(
    doc ="""Generated from node description file OgnAckermannController.ogn
Contains templates for node types found in that file."""
)

def OmniGraph "TestGraph"
{
    token evaluator:type = "push"
    int2 fileFormatVersion = (1, 3)
    token flatCacheBacking = "Shared"
    token pipelineStage = "pipelineStageSimulation"

    def OmniGraphNode "Template_omni_isaac_wheeled_robots_AckermannController" (
        docs="""Ackermann Controller"""
    )
    {
        token node:type = "omni.isaac.wheeled_robots.AckermannController"
        int node:typeVersion = 1

        # 13 attributes
        custom double inputs:DT = 0.0 (
            docs="""Delta time for the simulation step"""
        )
        custom double inputs:acceleration = 1.0 (
            docs="""Desired forward acceleration for the robot in m/s^2"""
        )
        custom vector3d inputs:currentLinearVelocity = (0.0, 0.0, 0.0) (
            docs="""Current linear velocity of the robot in m/s"""
        )
        custom uint inputs:execIn (
            docs="""The input execution"""
        )
        custom bool inputs:invertSteeringAngle = false (
            docs="""Flips the sign of the steering angle, Set to true for rear wheel steering"""
        )
        custom double inputs:maxWheelRotation = 6.28 (
            docs="""Maximum angle of rotation for the front wheels in radians"""
        )
        custom double inputs:maxWheelVelocity = 100000 (
            docs="""Maximum angular velocity of the robot wheel in rad/s"""
        )
        custom double inputs:speed = 1.0 (
            docs="""Desired forward speed in m/s"""
        )
        custom double inputs:steeringAngle = 0.0 (
            docs="""Desired virtual angle in radians. Corresponds to the yaw of a virtual wheel located at the center of the front axle. By default it is positive for turning left and negative for turning right for front wheel drive."""
        )
        custom double inputs:trackWidth = 0.0 (
            docs="""Distance between the left and right rear wheels of the robot in meters"""
        )
        custom double inputs:turningWheelRadius = 0.0 (
            docs="""Radius of the front wheels of the robot in meters"""
        )
        custom bool inputs:useAcceleration = false (
            docs="""Use acceleration as an input, Set to false to use speed as input instead"""
        )
        custom double inputs:wheelBase = 0.0 (
            docs="""Distance between the front and rear axles of the robot in meters"""
        )

        # 4 attributes
        custom uint outputs:execOut (
            docs="""The output execution"""
        )
        custom double outputs:leftWheelAngle (
            docs="""Angle for the left turning wheel in radians"""
        )
        custom double outputs:rightWheelAngle (
            docs="""Angle for the right turning wheel in radians"""
        )
        custom double outputs:wheelRotationVelocity (
            docs="""Angular velocity for the turning wheels in rad/s"""
        )
    }
}
