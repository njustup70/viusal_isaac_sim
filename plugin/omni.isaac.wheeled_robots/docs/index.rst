Wheeled Robots [omni.isaac.wheeled_robots]
###########################################
.. _API omni.isaac.wheeled_robots:

The omni.isaac.wheeled_robots extension provides controllers, utilities, and omnigraph nodes for simulating wheeled 
robots in isaac sim.

Basic Usage
==============

The classes and controllers provided by omni.isaac.wheeled_robots are designed to be run within the **world** simulation context provided by :ref:`omni.isaac.core<API omni.isaac.core>`. Like many other classes provided by core, **wheeled_robots** are created by wrapping prims already present on the stage in an interface class. This API is expected by **world** to do things like initialize and reset data structures, apply drive commands, retrieve joint states, etc...

Creating this interface means specifying the articulation being managed, the name that **world** will know this object by, and the names of the drivable joints

.. code-block:: python
    :linenos:

    # Assuming a stage context containing a Jetbot at /World/Jetbot
    from omni.isaac.wheeled_robots.robots import WheeledRobot
    jetbot_prim_path = "/World/Jetbot"

    #wrap the articulation in the interface class
    jetbot = WheeledRobot(prim_path=jetbot_prim_path,
                          name="Joan",
                          wheel_dof_names=["left_wheel_joint", "right_wheel_joint"]
                         )

Commanding the robot should be done prior to the physics step using an **ArticulationAction**, a type provided by omni.isaac.core to facilitate things like mixed command modes (effort, velocity, and position) and complex robots with multiple types of actions that could be taken.

.. code-block:: python
    :linenos:

    from omni.isaac.core.utils.types import ArticulationAction
    
    action = ArticulationAction(joint_velocities = np.array([1.14, 1.42]))
    jetbot.apply_wheel_actions(action)

It is rarely the case however, that a user will want to command a robot by directly manipulating the joints, and so we also provide a suite of controllers to convert various types of general commands into specific joint actions. For example, you may want to control your differential 
base using throttle and steering commands...

.. code-block:: python
    :linenos:

    from omni.isaac.wheeled_robots.controllers import DifferentialController

    throttle = 1.0
    steering = 0.5
    controller = DifferentialController(name="simple_control", wheel_radius=0.035, wheel_base=0.1)
    jetbot.apply_wheel_actions(controller.forward(throttle, steering))
    

Controllers
==========================

Differential Controller
**************************


.. autoclass:: omni.isaac.wheeled_robots.controllers.DifferentialController
    :inherited-members:
    :members:
    :undoc-members:
    :exclude-members:

|

Holonomic Controller
**************************

.. autoclass:: omni.isaac.wheeled_robots.controllers.HolonomicController
    :inherited-members:
    :members:
    :undoc-members:
    :exclude-members:

|

Wheel Base Pose Controller
**************************

.. autoclass:: omni.isaac.wheeled_robots.controllers.WheelBasePoseController
    :inherited-members:
    :members:
    :undoc-members:
    :exclude-members:

|

Robots
==========================

Wheeled Robot
**************************

    .. autoclass:: omni.isaac.wheeled_robots.robots.WheeledRobot
        :inherited-members:
        :members:
        :undoc-members:
        :exclude-members:

    |



Holonomic Robot USD Setup
**************************

.. autoclass:: omni.isaac.wheeled_robots.robots.HolonomicRobotUsdSetup
    :inherited-members:
    :members:
    :undoc-members:
    :exclude-members:

|

Utilities
==========================

Quintic Polynomial
*************************

.. autoclass:: omni.isaac.wheeled_robots.controllers.QuinticPolynomial
    :inherited-members:
    :members:
    :undoc-members:
    :exclude-members:

|

Quintic Polynomials Planner
***************************

.. autoclass:: omni.isaac.wheeled_robots.controllers.quintic_polynomials_planner
    :inherited-members:
    :members:
    :undoc-members:
    :exclude-members:

|

Stanly Control
*************************

.. autoclass:: omni.isaac.wheeled_robots.controllers.stanley_control
    :inherited-members:
    :members:
    :undoc-members:
    :exclude-members:

|

PID Control
*************************

.. autoclass:: omni.isaac.wheeled_robots.controllers.pid_control
    :inherited-members:
    :members:
    :undoc-members:
    :exclude-members:

|

..
   [begin ogn autogenerated]
.. _ext_omni_isaac_wheeled_robots:

Omnigraph Nodes
===============

.. toctree::
    :glob:
    :maxdepth: 1

    ogn/*
..
   [end ogn autogenerated]
